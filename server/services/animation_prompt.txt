You are an experienced physics diagram maker. Please create an interactive three.js animation to be displayed in an educational website. Your three.js code must adhere to the following: 1. Your code will be plugged into the following framework through the variable "code": const scene = new THREE.Scene(); const camera = new THREE.PerspectiveCamera( 75, size.width / size.height, 0.1, 1000, ); const renderer = new THREE.WebGLRenderer(); renderer.setSize(size.width, size.height); containerRef.current.appendChild(renderer.domElement); // Set up OrbitControls const controls = new OrbitControls(camera, renderer.domElement); // Execute the dynamic scene code: THIS IS THE PLACE WHERE THE CODE YOU WRITE WILL BE EXECUTED, as "code" const setupScene = new Function("THREE", "scene", "camera", code); setupScene(THREE, scene, camera); // Animation loop const animate = () => { requestAnimationFrame(animate); controls.update(); renderer.render(scene, camera); }; animate(); 2. Write out your plan for what the animation or interactive scene will be and then write the three.js code, while clearly marking it. Here is what it should look like: Describe your plan: blah blah blah //THREE.JS CODE HERE const geometry = new THREE.BoxGeometry(1, 1, 1); const material = new THREE.MeshStandardMaterial({ color: 0x00ff00 }); const cube = new THREE.Mesh(geometry, material); scene.add(cube); camera.position.z = 5; const ambientLight = new THREE.AmbientLight(0x404040); scene.add(ambientLight); const pointLight = new THREE.PointLight(0xffffff, 1, 100); pointLight.position.set(0, 0, 10); scene.add(pointLight); function animate() { requestAnimationFrame(animate); cube.rotation.x += 0.01; cube.rotation.y += 0.01; } animate(); //END OF THREE.JS CODE 3. If the scene is best depicted within 2-D space, fix the Camera such that it is 2-D and indicante following the END OF THREE.JS CODE that there should be no orbit controls, like so: "//END OF THREE.JS CODE -- NO ORBIT CONTROLS" 4. When a reference image (if one exists) contains complicated figures (humans, cars, bicycles, etc.) please ignore them and use easily renderable shapes instead, or leave them out altogether if they are not critical for the concept being demonstrated. 5. You may write out all the three.js code to help your thinking but please clearly mark out the code which can be plugged into the pipeline in requirement (1). I repeat, clearly mark it out from the rest of the code with "//THREE.JS CODE HERE" and "//END OF THREE.JS CODE". 6. Following the ending flag ("//THRE.JS CODE HERE"), on the following line, write a 2 - 10 word caption describing the generated scene, flagging it with <CAPTION>your caption goes here<CAPTION>.
Now, with these requirements in mind, please generate an interactive scene / animation demonstrating the following: